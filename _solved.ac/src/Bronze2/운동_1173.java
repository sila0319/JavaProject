//영식이가 운동을 하는 과정은 1분 단위로 나누어져 있다. 매 분마다 영식이는 운동과 휴식 중 하나를 선택해야 한다.
//
//운동을 선택한 경우, 영식이의 맥박이 T만큼 증가한다. 즉, 영식이의 맥박이 X였다면, 
//1분 동안 운동을 한 후 맥박이 X+T가 되는 것이다. 영식이는 맥박이 M을 넘는 것을 원하지 않기 때문에, X+T가 M보다 작거나 같을 때만 운동을 할 수 있다. 
//휴식을 선택하는 경우 맥박이 R만큼 감소한다. 즉, 영식이의 맥박이 X였다면, 1분 동안 휴식을 한 후 맥박은 X-R이 된다. 
//맥박은 절대로 m보다 낮아지면 안된다. 따라서, X-R이 m보다 작으면 맥박은 m이 된다.
//
//영식이의 초기 맥박은 m이다. 운동을 N분 하려고 한다. 이때 운동을 N분하는데 필요한 시간의 최솟값을 구해보자. 운동하는 시간은 연속되지 않아도 된다.
//
//입력
//첫째 줄에 다섯 정수 N, m, M, T, R이 주어진다.
//
//출력
//첫째 줄에 운동을 N분하는데 필요한 시간의 최솟값을 출력한다.. 만약 운동을 N분 할 수 없다면 -1을 출력한다.
//
//제한
//1 ≤ N, T, R ≤ 200
//50 ≤ m ≤ M ≤ 200
//

package Bronze2;

import java.util.Scanner;

public class 운동_1173 {
	public static void main(String[] args)  {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();//N분만큼 운동을한다
		int m = sc.nextInt();//최소 맥박 최소맥박보다 맥박이 작아지면안된다
		int M = sc.nextInt();//최대 맥박 M값만큼 맥박이 넘으면 안된다.
		int T = sc.nextInt();//운동후 맥박이 T만큼증가
		int R = sc.nextInt();//휴식 후에 R만큼 맥박 감소
		int X = m;//영식이의 맥박 값
		int t=0;//영식이가 운동만 한 시간
		int a=0;//영식이가 운동을 시작한 시간(휴식+운동시간)
				
		//운동은 M값보다 작거나 같을때만 운동이 가능함
		//1분동안 운동을하면 맥박이 X+T가 됨
		//휴식을 선택하면 R만큼 감소함 1분후 맥박은 X-R이 됨.
		//단 X가 m보다 낮으면안됨 X-R이 m보다 작으면 맥박은 m이됨
		
		if(m>M||X+T>M) {
			//최소맥박이 최대맥박보다 크거나 혹은 최소맥박+ 쉰후 내려가는맥박이 최대맥박보다 클경우 -1을 출력한다.
			System.out.println(-1);
		}else {
			while(t!=N) {//운동을 해야하는시간과 운동을한 시간이 다른동안 반복 같아지면 멈춤
				if(M>=X+T) {//X+T값이 M보다 작거나같은경우 운동함
					X +=T;//운동 후 영식이의 맥박에 T만큼 더한다. 
					t++;//영식이의 운동시간에 1을더한다
				}else if(M<=T+X) {//최대맥박보다 영식이의 맥박과 운동후 맥박 증가량이 많다면 휴식을 취함.
					if(X-R<m) {X=m;}//휴식후에 영식이의 맥박이 최소맥박보다 작아질 경우 영식이의 맥박은 최소맥박과 같아짐
					else {X -=R;}//최소맥박보다 작지 않을 경우 영식이의 맥박에서 R값만큼 뺌
					}
				a++;//영식이의 운동 총시간에 1을더한다.
				}System.out.println(a);
			}
	}
}
