package Bronze1;

import java.util.Scanner;

	public class 설탕_배달_2839 {
		public static void main(String[] args)   {
		//이문제의 핵심 요소는 첫번째 5로 나누어떨어지는경우를 먼저판별해야한다.
		//만일 5로 나누어떨어지지 않을 경우 2가지의 경우로 봐야한다.
		//1. 5와3을 복합적으로 사용해서 나누어떨어지는경우
		//2.3으로만 나누어떨어지는 경우
		//만약 위의 상황에 다 적용되지 않는다면 -1을 출력해야한다. 
			
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int result =0;
		int min =1700;
		if(n%5==0) { //5로나누어 떨어질 경우는 최소값이다.
			min = n/5;
		}else {
			//5로 나누어 떨어지지 않을경우 3으로 나누었을 경우 3과5를 복합적으로 나누었을경우를 살핀다.
			
			for (int i = 0; i<= n/5 ; i++) {
				//초반에 i*5 < n으로 멈추게 하였으나 그럴 경우 안돌아도 되는데 굳이돌아서
				//i <=n/5로 고침 이렇게 하면 필요한 만큼 for문이 실행이됨.
				if((n-i*5)%3==0) {//i=0일때 3으로 나누어 떨어지는지 검사가 가능하다.
					//3으로 나누어 떨어진 경우와 5와3을 섞어서 나누어떨어진경우를 비교하기 위해 min이란 변수를둔다.
					//n의 최대값은 5000이므로 3으로 나눈수가 1666정도이므로 대략 1700정도로 세팅한다.
					
					result=i+(n-i*5)/3;
					//i를 더해주는 이유는 5로 뺀 횟수이며 (n-i*5)/3은 5로빼고 남은 설탕이 3으로 나누어 떨어지는 갯수이다.
					
					if(min > result) {
						//min값이 1700이므로 무조건 min값은 바뀌게 된다. 
						//min값이 변경후 3으로 나누어 떨어지는 경우와 3과5를 복합적으로 섞어나누어 떨어지는 경우가 서로 비교되므로
						//어떤 방법이 더작은지에 대해 비교가능하다.
						min = result;
					}
				}
					
				}
			}
		if(min==1700) {//min이 1700이라는 뜻은 모든 case에 대해서 나누어 떨어지지 않는다는걸의미한다.
			System.out.println(-1);
		}else {//min의 값이 변동이 되었다면 한번이라도 나누어 떨어졌다는 뜻이므로 min값을 말한다.
			System.out.println(min);
		}
	}
}
